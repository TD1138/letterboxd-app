# queries.yaml
watchlist_query:
  sql: |

    WITH BASE_TABLE AS (
    
      SELECT
      
        a.FILM_ID
        ,c.FILM_TITLE
        ,d.FILM_GENRE
        ,e.FILM_RATING
        ,f.FILM_RATING_SCALED
        ,CASE WHEN f.FILM_RATING_SCALED IS NOT NULL THEN 1 ELSE 0 END AS RATED
      
      FROM ALL_FILMS a
      LEFT JOIN CONTENT_TYPE b
      ON a.FILM_ID = b.FILM_ID
      LEFT JOIN FILM_TITLE c
      ON a.FILM_ID = c.FILM_ID
      LEFT JOIN FILM_GENRE d
      ON a.FILM_ID = d.FILM_ID
      LEFT JOIN FILM_LETTERBOXD_STATS e
      ON a.FILM_ID = e.FILM_ID
      LEFT JOIN PERSONAL_RATING f
      ON a.FILM_ID = f.FILM_ID
      
      WHERE CONTENT_TYPE = 'movie'
      
    )
        
    , GENRE_SCORE AS (
    
      SELECT
    
        FILM_GENRE
        ,AVG(FILM_RATING) AS MEAN_RATING
        ,AVG(FILM_RATING_SCALED) AS MY_MEAN_RATING
        ,AVG(FILM_RATING_SCALED) - AVG(FILM_RATING) AS MY_VARIANCE
        ,((AVG(FILM_RATING_SCALED) - AVG(FILM_RATING)) * ((SUM(RATED)+0.0)/COUNT(*))) AS VARIANCE_SCORE
        ,COUNT(*) AS FILM_COUNT
        ,SUM(RATED) AS RATED_FILM_COUNT
        ,(SUM(RATED)+0.0)/COUNT(*) AS SCALER
    
      FROM BASE_TABLE
    
      GROUP BY FILM_GENRE
    
    )
    
    , STREAMING_CONCAT AS (
    
      SELECT
        
        FILM_ID
        ,GROUP_CONCAT(STREAMING_SERVICE_FULL, ', ') AS STREAMING_SERVICES
        ,MIN(CASE WHEN STREAMING_SERVICE_ABBR = 'rent' THEN PRICE END) AS MIN_RENTAL_PRICE
      
      FROM FILM_STREAMING_SERVICES
      
      GROUP BY FILM_ID
    
    )
    
    SELECT

      a.FILM_ID
      ,b.FILM_TITLE
      ,b.LETTERBOXD_URL
      ,a.SEEN
      ,c.FILM_WATCH_COUNT
      ,c.FILM_TOP_250
      ,c.FILM_RATING
      ,c.FILM_LIKES_COUNT
      ,c.FILM_FAN_COUNT
      ,CASE WHEN d.FILM_ID IS NULL THEN 'No' ELSE 'Yes' END AS STREAMING
      ,h.STREAMING_SERVICES
      ,CASE WHEN h.MIN_RENTAL_PRICE IS NULL THEN 'No' ELSE 'Yes' END AS RENTABLE
      ,CASE WHEN d.FILM_ID IS NOT NULL OR h.MIN_RENTAL_PRICE IS NOT NULL THEN 'Yes' ELSE 'No' END AS WATCHABLE
      ,h.MIN_RENTAL_PRICE
      ,e.FILM_RUNTIME
      ,i.FILM_DECADE
      ,i.FILM_YEAR
      ,f.FILM_GENRE
      ,COALESCE(g.VARIANCE_SCORE, 0) AS GENRE_SCORE
    
    FROM EXPANDED_WATCHLIST a
    LEFT JOIN FILM_TITLE b
    ON a.FILM_ID = b.FILM_ID
    LEFT JOIN FILM_LETTERBOXD_STATS c
    ON a.FILM_ID = c.FILM_ID
    LEFT JOIN FILMS_AVAILABLE_TO_STREAM d
    ON a.FILM_ID = d.FILM_ID
    LEFT JOIN FILM_RUNTIME e
    ON a.FILM_ID = e.FILM_ID
    LEFT JOIN FILM_GENRE f
    ON a.FILM_ID = f.FILM_ID
    LEFT JOIN GENRE_SCORE g
    ON f.FILM_GENRE = g.FILM_GENRE
    LEFT JOIN STREAMING_CONCAT h
    ON a.FILM_ID = h.FILM_ID
    LEFT JOIN FILM_YEAR i
    ON a.FILM_ID = i.FILM_ID
    LEFT JOIN FILM_COLLECTIONS_VALID j
    ON a.FILM_ID = j.FILM_ID
    LEFT JOIN COLLECTION_STATS k
    ON j.COLLECTION_ID = k.COLLECTION_ID
    
    WHERE COALESCE(j.COLLECTION_NUM, 0) <= COALESCE(k.MAX_WATCHED, 0) + 1;

year_completion_query:
  sql: |

    WITH BASE_TABLE AS (

      SELECT
        a.FILM_ID
        ,d.FILM_TITLE
        ,b.FILM_YEAR
        ,CASE WHEN c.FILM_ID IS NULL THEN 0 ELSE 1 END AS WATCHED
        ,e.FILM_RATING
        ,f.FILM_RATING_SCALED
        ,CASE WHEN f.FILM_RATING_SCALED IS NOT NULL THEN 1 ELSE 0 END AS RATED
      
      FROM ALL_FEATURE_FILMS a
      
      LEFT JOIN FILM_YEAR b
      ON a.FILM_ID = b.FILM_ID
      
      LEFT JOIN WATCHED c
      ON a.FILM_ID = c.FILM_ID
      
      LEFT JOIN FILM_TITLE d
      ON a.FILM_ID = d.FILM_ID

      LEFT JOIN FILM_LETTERBOXD_STATS e
      ON a.FILM_ID = e.FILM_ID

      LEFT JOIN PERSONAL_RATING f
      ON a.FILM_ID = f.FILM_ID
    
    )

    SELECT
   
        FILM_YEAR
        ,SUM(WATCHED) AS FILMS_WATCHED
        ,COUNT(*) AS TOTAL_FILMS
        ,AVG(WATCHED) AS PERCENT_WATCHED
        ,AVG(FILM_RATING) AS MEAN_RATING
        ,AVG(FILM_RATING_SCALED) AS MY_MEAN_RATING
        ,AVG(RATED) AS PERCENT_RATED


    FROM BASE_TABLE

    GROUP BY FILM_YEAR

    ORDER BY FILM_YEAR DESC

genre_completion_query:
  sql: |
    WITH BASE_TABLE AS (

      SELECT

        a.FILM_ID
        ,d.FILM_TITLE
        ,b.FILM_GENRE
        ,CASE WHEN c.FILM_ID IS NULL THEN 0 ELSE 1 END AS WATCHED
    
      FROM ALL_FEATURE_FILMS a
      
      LEFT JOIN FILM_GENRE b
      ON a.FILM_ID = b.FILM_ID
      
      LEFT JOIN WATCHED c
      ON a.FILM_ID = c.FILM_ID
      
      LEFT JOIN FILM_TITLE d
      ON a.FILM_ID = d.FILM_ID
    
      --WHERE b.FILM_GENRE != 'studiogenre-films'
        
      )
      
    SELECT
      
      FILM_GENRE
      ,SUM(WATCHED) AS FILMS_WATCHED
      ,COUNT(*) AS TOTAL_FILMS
      ,AVG(WATCHED) AS PERCENT_WATCHED
      
    FROM BASE_TABLE
    
    GROUP BY FILM_GENRE

    ORDER BY FILM_GENRE DESC

director_completion_query:
  sql: |
    WITH BASE_TABLE AS (

      SELECT

        a.FILM_ID
        ,d.FILM_TITLE
        ,b.PERSON_ID
        ,e.PERSON_NAME AS DIRECTOR_NAME
        ,CASE WHEN c.FILM_ID IS NULL THEN 0 ELSE 1 END AS WATCHED
        ,CASE WHEN f.FILM_RATING_SCALED IS NOT NULL THEN 1 ELSE 0 END AS RATED
    
      FROM ALL_FEATURE_FILMS a
      
      LEFT JOIN FILM_CREW b
      ON a.FILM_ID = b.FILM_ID
      
      LEFT JOIN WATCHED c
      ON a.FILM_ID = c.FILM_ID
      
      LEFT JOIN FILM_TITLE d
      ON a.FILM_ID = d.FILM_ID

      LEFT JOIN PERSON_INFO e
      ON b.PERSON_ID = e.PERSON_ID

      LEFT JOIN PERSONAL_RATING f
      ON a.FILM_ID = f.FILM_ID
    
      WHERE b.JOB = 'Director'
      AND e.PERSON_NAME IS NOT NULL
        
      )
      
    SELECT
      
      DIRECTOR_NAME
      ,COUNT(*) AS TOTAL_FILMS
      ,SUM(WATCHED) AS FILMS_WATCHED
      ,AVG(WATCHED) AS PERCENT_WATCHED
      ,SUM(RATED) AS FILMS_RATED
      ,AVG(RATED) AS PERCENT_RATED
      
    FROM BASE_TABLE
    
    GROUP BY DIRECTOR_NAME

    HAVING TOTAL_FILMS >= 3 AND FILMS_WATCHED >= 1

    ORDER BY PERCENT_WATCHED DESC, FILMS_WATCHED DESC

director_film_level_query:
  sql: |
    SELECT

      d.FILM_TITLE
      ,e.PERSON_NAME AS DIRECTOR_NAME
      ,CASE WHEN c.FILM_ID IS NULL THEN 0 ELSE 1 END AS WATCHED
      ,f.FILM_YEAR
      ,g.FILM_WATCH_COUNT
      ,g.FILM_RATING
      ,i.FILM_RATING_SCALED
  
    FROM ALL_FEATURE_FILMS a
    
    LEFT JOIN FILM_CREW b
    ON a.FILM_ID = b.FILM_ID
    
    LEFT JOIN WATCHED c
    ON a.FILM_ID = c.FILM_ID
    
    LEFT JOIN FILM_TITLE d
    ON a.FILM_ID = d.FILM_ID

    LEFT JOIN PERSON_INFO e
    ON b.PERSON_ID = e.PERSON_ID

    LEFT JOIN FILM_YEAR f
    ON a.FILM_ID = f.FILM_ID

    LEFT JOIN FILM_LETTERBOXD_STATS g
    ON a.FILM_ID = g.FILM_ID

    LEFT JOIN FILM_RELEASE_INFO h
    ON a.FILM_ID = h.FILM_ID

    LEFT JOIN PERSONAL_RATING i
    ON a.FILM_ID = i.FILM_ID
  
    WHERE b.JOB = 'Director'

    ORDER BY h.FILM_RELEASE_DATE ASC

director_debut_query:
  sql: |
    SELECT

      a.FILM_ID
      ,b.FILM_TITLE
      ,c.FILM_RELEASE_DATE
      ,d.PERSON_ID
      ,e.PERSON_NAME AS DIRECTOR_NAME
      ,d.JOB
      ,f.TOTAL_FILMS
      ,ROW_NUMBER() OVER (PARTITION BY d.PERSON_ID ORDER BY c.FILM_RELEASE_DATE) AS FILM_NUMBER
      ,MIN(c.FILM_RELEASE_DATE) OVER (PARTITION BY d.PERSON_ID) AS DEBUT_FILM_RELEASE_DATE
      ,julianday(c.FILM_RELEASE_DATE) - julianday(MIN(c.FILM_RELEASE_DATE) OVER (PARTITION BY d.PERSON_ID)) AS DAYS_SINCE_DEBUT
      ,julianday(c.FILM_RELEASE_DATE) - julianday(e.DATE_OF_BIRTH) AS AGE_IN_DAYS

    FROM ALL_FEATURE_FILMS a
    LEFT JOIN FILM_TITLE b
    ON a.FILM_ID = b.FILM_ID
    LEFT JOIN FILM_RELEASE_INFO c
    ON a.FILM_ID = c.FILM_ID
    LEFT JOIN FILM_CREW d
    ON a.FILM_ID = d.FILM_ID
    LEFT JOIN PERSON_INFO e
    ON d.PERSON_ID = e.PERSON_ID
    LEFT JOIN (SELECT b.PERSON_ID, COUNT(DISTINCT a.FILM_ID) AS TOTAL_FILMS FROM ALL_FEATURE_FILMS a LEFT JOIN FILM_CREW b ON a.FILM_ID = b.FILM_ID GROUP BY b.PERSON_ID) f
    ON d.PERSON_ID = f.PERSON_ID

    WHERE d.job = 'Director'
    AND f.TOTAL_FILMS > 5
    AND e.PERSON_NAME IS NOT NULL

director_topfive_query:
  sql: |
    
    WITH BASE_TABLE AS (

      SELECT
      
         a.FILM_ID
        ,b.FILM_TITLE
        ,d.PERSON_ID
        ,e.PERSON_NAME AS DIRECTOR_NAME
        ,CASE WHEN c.FILM_ID IS NULL THEN 0 ELSE 1 END AS RATED
        ,c.FILM_RATING_SCALED
      
      FROM ALL_FEATURE_FILMS a
      LEFT JOIN FILM_TITLE b
      ON a.FILM_ID = b.FILM_ID
      LEFT JOIN PERSONAL_RATING c
      ON a.FILM_ID = c.FILM_ID
      LEFT JOIN FILM_CREW d
      ON a.FILM_ID = d.FILM_ID
      LEFT JOIN PERSON_INFO e
      ON d.PERSON_ID = e.PERSON_ID
      
      WHERE d.job = 'Director'
      AND e.PERSON_NAME IS NOT NULL
    
    )
    
    , RATED AS (
      
        SELECT
        
          PERSON_ID
          ,DIRECTOR_NAME
          ,COUNT(*) AS TOTAL_FILMS
          ,SUM(RATED) AS FILMS_RATED
        
        FROM BASE_TABLE
      
        GROUP BY PERSON_ID,DIRECTOR_NAME
      
      )
    
    , RANKED AS (
      
        SELECT
      
          a.PERSON_ID
          ,a.DIRECTOR_NAME
          ,a.TOTAL_FILMS
          ,a.FILMS_RATED
          ,b.FILM_TITLE
          ,b.FILM_RATING_SCALED
          ,ROW_NUMBER() OVER (PARTITION BY a.PERSON_ID ORDER BY b.FILM_RATING_SCALED DESC) AS FILM_RANK
          
        FROM RATED a
        
        LEFT JOIN BASE_TABLE b
        ON a.PERSON_ID = b.PERSON_ID
        
        WHERE a.FILMS_RATED >= 5
        OR (a.TOTAL_FILMS >=3 AND a.TOTAL_FILMS = a.FILMS_RATED)
      
      )
    
    SELECT

      PERSON_ID
      ,DIRECTOR_NAME
      ,MAX(TOTAL_FILMS) AS TOTAL_FILMS
      ,MAX(FILMS_RATED) AS FILMS_RATED
      ,AVG(FILM_RATING_SCALED) AS TOP_FIVE_RATING
      
    FROM RANKED

    WHERE FILM_RANK <= 5

    GROUP BY PERSON_ID, DIRECTOR_NAME

    ORDER BY TOP_FIVE_RATING DESC

actor_completion_query:
  sql: |
    WITH BASE_TABLE AS (

      SELECT

        a.FILM_ID
        ,d.FILM_TITLE
        ,b.PERSON_ID
        ,e.PERSON_NAME AS ACTOR_NAME
        ,CASE WHEN c.FILM_ID IS NULL THEN 0 ELSE 1 END AS WATCHED
        ,CASE WHEN f.FILM_RATING_SCALED IS NOT NULL THEN 1 ELSE 0 END AS RATED
    
      FROM ALL_FEATURE_FILMS a
      
      LEFT JOIN FILM_CAST b
      ON a.FILM_ID = b.FILM_ID
      
      LEFT JOIN WATCHED c
      ON a.FILM_ID = c.FILM_ID
      
      LEFT JOIN FILM_TITLE d
      ON a.FILM_ID = d.FILM_ID

      LEFT JOIN PERSON_INFO e
      ON b.PERSON_ID = e.PERSON_ID

      LEFT JOIN PERSONAL_RATING f
      ON a.FILM_ID = f.FILM_ID

      WHERE e.PERSON_NAME IS NOT NULL
        
      )
      
    SELECT
      
      ACTOR_NAME
      ,COUNT(*) AS TOTAL_FILMS
      ,SUM(WATCHED) AS FILMS_WATCHED
      ,AVG(WATCHED) AS PERCENT_WATCHED
      ,SUM(RATED) AS FILMS_RATED
      ,AVG(RATED) AS PERCENT_RATED
      
    FROM BASE_TABLE
    
    GROUP BY ACTOR_NAME

    HAVING TOTAL_FILMS >= 3 AND FILMS_WATCHED >= 1

    ORDER BY FILMS_WATCHED DESC, PERCENT_WATCHED DESC

actor_film_level_query:
  sql: |
    SELECT

       d.FILM_TITLE
      ,e.PERSON_NAME AS ACTOR_NAME
      ,CASE WHEN c.FILM_ID IS NULL THEN 0 ELSE 1 END AS WATCHED
      ,f.FILM_YEAR
      ,g.FILM_WATCH_COUNT
      ,g.FILM_RATING
      ,i.FILM_RATING_SCALED
  
    FROM ALL_FEATURE_FILMS a
    
    LEFT JOIN FILM_CAST b
    ON a.FILM_ID = b.FILM_ID
    
    LEFT JOIN WATCHED c
    ON a.FILM_ID = c.FILM_ID
    
    LEFT JOIN FILM_TITLE d
    ON a.FILM_ID = d.FILM_ID

    LEFT JOIN PERSON_INFO e
    ON b.PERSON_ID = e.PERSON_ID

    LEFT JOIN FILM_YEAR f
    ON a.FILM_ID = f.FILM_ID

    LEFT JOIN FILM_LETTERBOXD_STATS g
    ON a.FILM_ID = g.FILM_ID

    LEFT JOIN FILM_RELEASE_INFO h
    ON a.FILM_ID = h.FILM_ID

    LEFT JOIN PERSONAL_RATING i
    ON a.FILM_ID = i.FILM_ID

    WHERE e.PERSON_NAME IS NOT NULL

    ORDER BY h.FILM_RELEASE_DATE ASC

actor_debut_query:
  sql: |
    SELECT

      a.FILM_ID
      ,b.FILM_TITLE
      ,c.FILM_RELEASE_DATE
      ,d.PERSON_ID
      ,e.PERSON_NAME AS ACTOR_NAME
      ,f.TOTAL_FILMS
      ,ROW_NUMBER() OVER (PARTITION BY d.PERSON_ID ORDER BY c.FILM_RELEASE_DATE) AS FILM_NUMBER
      ,MIN(c.FILM_RELEASE_DATE) OVER (PARTITION BY d.PERSON_ID) AS DEBUT_FILM_RELEASE_DATE
      ,julianday(c.FILM_RELEASE_DATE) - julianday(MIN(c.FILM_RELEASE_DATE) OVER (PARTITION BY d.PERSON_ID)) AS DAYS_SINCE_DEBUT

    FROM ALL_FEATURE_FILMS a
    LEFT JOIN FILM_TITLE b
    ON a.FILM_ID = b.FILM_ID
    LEFT JOIN FILM_RELEASE_INFO c
    ON a.FILM_ID = c.FILM_ID
    LEFT JOIN FILM_CAST d
    ON a.FILM_ID = d.FILM_ID
    LEFT JOIN PERSON_INFO e
    ON d.PERSON_ID = e.PERSON_ID
    LEFT JOIN (SELECT b.PERSON_ID, COUNT(DISTINCT a.FILM_ID) AS TOTAL_FILMS FROM ALL_FEATURE_FILMS a LEFT JOIN FILM_CAST b ON a.FILM_ID = b.FILM_ID GROUP BY b.PERSON_ID) f
    ON d.PERSON_ID = f.PERSON_ID

    WHERE f.TOTAL_FILMS > 30
    AND e.PERSON_NAME IS NOT NULL

film_score_query:
  sql: |
  
    SELECT

      a.FILM_ID
      ,b.FILM_TITLE
      ,f.FILM_GENRE
      ,g.FILM_WATCH_COUNT
      ,g.FILM_RATING
      ,ROUND(g.FILM_WATCH_COUNT * g.FILM_RATING * 100 / (2500000*5), 1) AS FILM_SCORE
      ,CASE WHEN c.FILM_ID IS NULL THEN 0 ELSE 1 END AS WATCHED
      ,CASE WHEN d.FILM_ID IS NULL THEN 'No' ELSE 'Yes' END AS STREAMING
      ,e.STREAMING_SERVICES
    

    FROM EXPANDED_WATCHLIST a
    
    LEFT JOIN FILM_TITLE b
    ON a.FILM_ID = b.FILM_ID
    
    LEFT JOIN WATCHED c
    ON a.FILM_ID = c.FILM_ID
    
    LEFT JOIN FILMS_AVAILABLE_TO_STREAM d
    ON a.FILM_ID = d.FILM_ID
    
    LEFT JOIN
      (
        SELECT
          FILM_ID
          ,GROUP_CONCAT(STREAMING_SERVICE_FULL, ', ') AS STREAMING_SERVICES
        FROM FILM_STREAMING_SERVICES GROUP BY FILM_ID
      ) e
    ON a.FILM_ID = e.FILM_ID
    
    LEFT JOIN FILM_GENRE f
    ON a.FILM_ID = f.FILM_ID
    
    LEFT JOIN FILM_LETTERBOXD_STATS g
    ON a.FILM_ID = g.FILM_ID
    
    WHERE b.FILM_TITLE IS NOT NULL
    
    ORDER BY g.FILM_WATCH_COUNT DESC

diary_query_basic:
  sql: |

    SELECT
   
      WATCH_DATE
      ,SUM(IS_NARRATIVE_FEATURE) AS MOVIE_COUNT
      ,AVG(CASE WHEN IS_NARRATIVE_FEATURE = 1 THEN FILM_RATING END) AS MOVIE_RATING
    
    FROM DIARY
    
    GROUP BY WATCH_DATE
    
    ORDER BY WATCH_DATE ASC

top_keyword_query:
  sql: |
  
    WITH BASE_TABLE AS (
    
      SELECT
      
        a.FILM_ID
        ,c.FILM_TITLE
        ,d.KEYWORD
        ,d.KEYWORD_ID
        ,e.FILM_RATING
        ,f.FILM_RATING_SCALED
        ,CASE WHEN f.FILM_RATING_SCALED IS NOT NULL THEN 1 ELSE 0 END AS RATED
      
      FROM ALL_RELEASED_FILMS a
      LEFT JOIN CONTENT_TYPE b
      ON a.FILM_ID = b.FILM_ID
      LEFT JOIN FILM_TITLE c
      ON a.FILM_ID = c.FILM_ID
      LEFT JOIN FILM_KEYWORDS d
      ON a.FILM_ID = d.FILM_ID
      LEFT JOIN FILM_LETTERBOXD_STATS e
      ON a.FILM_ID = e.FILM_ID
      LEFT JOIN PERSONAL_RATING f
      ON a.FILM_ID = f.FILM_ID
      
      WHERE b.CONTENT_TYPE = 'movie'
      
      )
      
    , SCORE_TABLE AS (
    
      SELECT

        KEYWORD_ID
        ,KEYWORD
        ,AVG(FILM_RATING) AS MEAN_RATING
        ,AVG(FILM_RATING_SCALED) AS MY_MEAN_RATING
        ,AVG(FILM_RATING_SCALED) - AVG(FILM_RATING) AS MY_VARIANCE
        ,((AVG(FILM_RATING_SCALED) - AVG(FILM_RATING)) * ((SUM(RATED)+0.0)/COUNT(*))) AS VARIANCE_SCORE
        ,COUNT(*) AS KEYWORD_COUNT
        ,SUM(RATED) AS MY_RATING_COUNT
        ,(SUM(RATED)+0.0)/COUNT(*) AS SCALER
      
      FROM BASE_TABLE
      
      GROUP BY KEYWORD
      
      HAVING KEYWORD_COUNT >= 50
      AND VARIANCE_SCORE >= 0.05
      AND MY_RATING_COUNT >= 3
      --ORDER BY MEAN_RATING DESC
      --ORDER BY KEYWORD_COUNT DESC
      --ORDER BY MY_VARIANCE DESC
      --ORDER BY VARIANCE_SCORE DESC
      --ORDER BY MY_MEAN_RATING DESC
      --ORDER BY VARIANCE_SCORE DESC
    )
    
    SELECT
      a.FILM_ID
      ,a.KEYWORD_ID
      ,b.KEYWORD
      
    FROM FILM_KEYWORDS a
    LEFT JOIN SCORE_TABLE b
    ON a.KEYWORD_ID = b.KEYWORD_ID

    WHERE b.KEYWORD_ID IS NOT NULL

watched_feature_stats_query:
  sql: |

    SELECT

      a.FILM_ID
      ,c.FILM_TITLE
      ,d.FILM_GENRE
      ,d.ALL_FILM_GENRES
      ,e.FILM_LANGUAGE
      ,f.FILM_WATCH_COUNT AS LETTERBOXD_WATCH_COUNT
      ,f.FILM_FAN_COUNT AS LETTERBOXD_FAN_COUNT
      ,f.FILM_LIKES_COUNT AS LETTERBOXD_LIKES_COUNT
      ,f.FILM_REVIEW_COUNT  AS LETTERBOXD_REVIEW_COUNT
      ,f.FILM_LIST_COUNT AS LETTERBOXD_LIST_COUNT
      ,f.FILM_TOP_250 AS LETTERBOXD_TOP_250
      ,f.FILM_RATING AS LETTERBOXD_RATING
      ,f.FILM_RATING_COUNT  AS LETTERBOXD_RATING_COUNT
      ,g.FILM_RUNTIME
      ,h.FILM_POPULARITY AS TMDB_FILM_POPULARITY
      ,h.FILM_VOTE_AVERAGE AS TMDB_VOTE_AVERAGE
      ,h.FILM_VOTE_COUNT AS TMDB_VOTE_COUNT
      ,i.FILM_YEAR
      ,i.FILM_DECADE
      ,x.FILM_RATING_BASIC
      ,x.FILM_RATING_SCALED
        
    FROM ALL_FEATURE_FILMS a
    
    LEFT JOIN WATCHED b
    ON a.FILM_ID = b.FILM_ID

    LEFT JOIN FILM_TITLE c
    ON a.FILM_ID = c.FILM_ID
    
    LEFT JOIN FILM_GENRE d
    ON a.FILM_ID = d.FILM_ID
    
    LEFT JOIN FILM_LANGUAGE e
    ON a.FILM_ID = e.FILM_ID
    
    LEFT JOIN FILM_LETTERBOXD_STATS f
    ON a.FILM_ID = f.FILM_ID
    
    LEFT JOIN FILM_RUNTIME g
    ON a.FILM_ID = g.FILM_ID
    
    LEFT JOIN FILM_TMDB_STATS h
    ON a.FILM_ID = h.FILM_ID
    
    LEFT JOIN FILM_YEAR i
    ON a.FILM_ID = i.FILM_ID
        
    LEFT JOIN PERSONAL_RATING x
    ON a.FILM_ID = x.FILM_ID
    
    WHERE b.FILM_ID IS NOT NULL

collection_completion_query:
  sql: |

    WITH BASE_TABLE AS (

      SELECT

        a.FILM_ID
        ,b.COLLECTION_NAME
        ,CASE WHEN c.FILM_ID IS NULL THEN 0 ELSE 1 END AS WATCHED
        ,CASE WHEN d.FILM_RATING_SCALED IS NOT NULL THEN 1 ELSE 0 END AS RATED
    
      FROM ALL_FEATURE_FILMS a
      
      LEFT JOIN FILM_COLLECTIONS b
      ON a.FILM_ID = b.FILM_ID
      
      LEFT JOIN WATCHED c
      ON a.FILM_ID = c.FILM_ID

      LEFT JOIN PERSONAL_RATING d
      ON a.FILM_ID = d.FILM_ID
       
      WHERE b.COLLECTION_ID > 0
      )
      
    SELECT
      
      COLLECTION_NAME
      ,COUNT(*) AS TOTAL_FILMS
      ,SUM(WATCHED) AS FILMS_WATCHED
      ,AVG(WATCHED) AS PERCENT_WATCHED
      ,SUM(RATED) AS FILMS_RATED
      ,AVG(RATED) AS PERCENT_RATED
      
    FROM BASE_TABLE
    
    GROUP BY COLLECTION_NAME

    HAVING TOTAL_FILMS >= 3 AND FILMS_WATCHED >= 1

    ORDER BY PERCENT_WATCHED DESC, FILMS_WATCHED DESC

collection_film_level_query:
  sql: | 

    WITH BASE_TABLE AS (

      SELECT

        d.FILM_TITLE
        ,b.COLLECTION_NAME
        ,CASE WHEN c.FILM_ID IS NULL THEN 0 ELSE 1 END AS WATCHED
        ,CASE WHEN h.FILM_RATING_SCALED IS NOT NULL THEN 1 ELSE 0 END AS RATED
        ,e.FILM_YEAR
        ,f.FILM_WATCH_COUNT
        ,f.FILM_RATING
        ,h.FILM_RATING_SCALED
      
      FROM ALL_FEATURE_FILMS a
        
      LEFT JOIN FILM_COLLECTIONS b
      ON a.FILM_ID = b.FILM_ID
        
      LEFT JOIN WATCHED c
      ON a.FILM_ID = c.FILM_ID
        
      LEFT JOIN FILM_TITLE d
      ON a.FILM_ID = d.FILM_ID

      LEFT JOIN FILM_YEAR e
      ON a.FILM_ID = e.FILM_ID

      LEFT JOIN FILM_LETTERBOXD_STATS f
      ON a.FILM_ID = f.FILM_ID

      LEFT JOIN FILM_RELEASE_INFO g
      ON a.FILM_ID = g.FILM_ID

      LEFT JOIN PERSONAL_RATING h
      ON a.FILM_ID = h.FILM_ID

      WHERE b.COLLECTION_ID > 0
      
      )

    , COLLECTION_LEVEL AS (

      SELECT
          
          COLLECTION_NAME
          ,COUNT(*) AS TOTAL_FILMS
          ,SUM(WATCHED) AS FILMS_WATCHED
          ,AVG(WATCHED) AS PERCENT_WATCHED
          ,SUM(RATED) AS FILMS_RATED
          ,AVG(RATED) AS PERCENT_RATED
          
        FROM BASE_TABLE
        
        GROUP BY COLLECTION_NAME

        HAVING TOTAL_FILMS >= 3 AND FILMS_WATCHED >= 1
  
      )

    SELECT
    
      a.COLLECTION_NAME
      ,a.FILM_TITLE
      ,a.FILM_YEAR
      ,a.FILM_WATCH_COUNT
      ,a.FILM_RATING
      ,a.WATCHED
      ,a.RATED
      ,a.FILM_RATING_SCALED

    FROM BASE_TABLE a

    LEFT JOIN COLLECTION_LEVEL b
    ON a.COLLECTION_NAME = b.COLLECTION_NAME

    WHERE b.TOTAL_FILMS IS NOT NULL

    ORDER BY a.COLLECTION_NAME ASC, a.FILM_YEAR ASC